CAP:
c: consistency(强一致性)
a:Availabillity(高 可用性)
p:Partition tolerance(分区容错性)
著名CAP的理论指出，一个分布式系统不可能同时满足C，A，P。由于分区容错性P在分布式系统中必须要保证，因此我们只能再A和C之间进行权衡。

zookeeper 保证的是cp
eureka 保证的是ap

zk的问题：
当向注册中心查询服务列表的时候，我们可以容忍注册中心返回的是几分钟以前的注册信息，但是不能接受服务直接down掉不可用，也就是说服务
注册功能对可用性的要求高于一致性，但是zookeeper会出现这样一种情况，当master节点因为网络故障与其他节点失去联系时，剩余节点会重新
进行leader选举。问题在于，选举leader的时间太长，30-120秒，且选举期间整个zk集群都是不可用的，这就导致在选举期间注册服务瘫痪。在云部署的
环境下，因网络问题使得zk集群失去master节点是较大概率会发生的事，虽然服务能够最终恢复，但是漫长的选举时间导致的注册长期不可用是不能容忍的。

eureka：
Eureka 看明白了这一点，因此在设计时就保证可用性，Eureka各个节点是平等的，几个检点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务，
而Eureka的客户端在某个Eureka注册或如果发现连接失败，则会自动切换至其他节点，只要有一台Eureka还在，就能保证注册服务可用（保证可用性），
只不过查到的信息可能不是最新的（不能保证强一致性），除此之外，Eureka还有一种自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka
就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况：
1：Eureka 不再从注册列表中移除因长时间没收到心跳而应该过期的服务
2：Eureka仍然能够接受新的服务的注册和查询请求，但是不会同步到其他节点上（即保证当前节点依然可用）
3：当网络稳定时，当前实例新的注册信息会被同步到其他节点中

因此，Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像zookeeper那样整个注册服务瘫痪


Ribbon
客户端负载均衡 


调用服务的两种方式：
1.微服务名字过得调用接口地址
2.通过接口+注解，获得我们的调用服务

Fegin
Fegin旨在使用编写java http客户端变得更容易

前面在使用Ribbon+RestTemplate时，利用restTemplate 对http请求的封装处理，形成可一套模板话的调用方法。但在实际开发中，由于对服务依赖的调用可能不止一处，
往往一个借口会被多出调用，所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用。所以Fegin在此基础上做了进一步封装，由他来帮助我们定义
和实现依赖服务接口的定义在Fegin的实现下我们只需要创建一个借口并使用注解的方式来配置他，即可完成对服务提供方的接口绑定，简化了使用spring cloud Ribbon时，
自动封装服务调用客户端的开发量。


服务熔断

熔断机制是对雪崩效应的一种微服务链路保护机制。
当扇出链路的某个微服务不可用或相应时间太长时，会进行服务降级，进而熔断该节点的微服务调用，快速返回错误的相应信息，当检测到该节点微服务调用相应恢复正常后恢复
调用链路。在spring cloud框架里熔断机制通过Hystrix实现。Hystrix会监控微服务间的调用的状况，当失败的调用到一定阈值，缺省是5秒内20次调用失败就会启动熔断机制，
熔断机制的注解是	@HystrixCommand

【服务熔断】
一般是某个服务故障或者异常引起的，类似现实世界的保险丝，当某个异常条件被触发，直接熔断整个服务，而不是一直等到此服务超时。
【服务降级】
所谓降级一般是从整体负荷考虑。当某个服务熔断后，服务器将不再被调用，此时客户端可以自己准备一个本地fallback回调，返回一个缺省值。
这样做，虽然服务水平下降，但好歹可用，比直接挂掉强






